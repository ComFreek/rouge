# -*- coding: utf-8 -*- #
# frozen_string_literal: true

# DO NOT EDIT - AUTOGENERATED
#
# This Rouge lexer file has been autogenerated from the Pygments lexer [1] by the script [2].
#
# [1]: https://github.com/ComFreek/mmtpygments
# [2]: https://github.com/ComFreek/mmtpygments/blob/master/mmtpygments/pygments_to_rouge.py

module Rouge
	module Lexers
		class MMT < RegexLexer
			title 'mmt'
			desc <<-DESC
MMT Surface Syntax
DESC
			tag 'mmt'
			mimetypes 'application/x-mmt'
			filenames '*.mmt','*.mmtx'
			state :root do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/\/T .*?❚/im do
					token Comment::Multiline
				end
				rule %r/\/\/.*?❚/im do
					token Comment::Multiline
				end
				rule %r/(document)((?: |\t)+)(\S+?)(?=\s+)/im do
					groups Keyword::Declaration,Text::Whitespace,Name::Namespace
				end
				rule %r/(meta)(\s+)(\S+)(\s+)([^❚]+)(\s*)(❚)/im do
					groups Keyword::Declaration,Text::Whitespace,Text,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(namespace)(\s+)(\S+?)(\s*)(❚)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(import)(\s+)(\S+)(\s+)(\S+?)(\s*)(❚)/im do
					groups Keyword::Namespace,Text::Whitespace,Name::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(fixmeta|ref|rule)(\s+)(\S+?)(\s*)(❚)/im do
					groups Comment::Preproc,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(diagram)\b/im do
					token Keyword::Declaration
					push :diagramHeader
				end
				rule %r/(theory)\b/im do
					token Keyword::Declaration
					push :theoryHeader
				end
				rule %r/(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(view)\b/im do
					groups Keyword,Text::Whitespace,Keyword,Text::Whitespace,Keyword::Declaration
					push :viewHeader
				end
				rule %r/[^❚]*?❚/im do
					token Generic::Error
				end
			end
			state :expectMD do
				rule %r/(\s*)(❚)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :expectDD do
				rule %r/(\s*)(❙)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :expectOD do
				rule %r/(\s*)(❘)/im do
					groups Text::Whitespace,Text
					pop!(1)
				end
			end
			state :structuralFeatureHeader do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/([^\s(❙❚:=]+)(\s*)(?:(\()([^)]*)(\)))?(\s*)(?:(:)(\s*)([^❘❙❚=]+))?(\s*)(?:(=)(\s*)([^\s:❙❚]+))?(\s*)(❙)/im do
					groups Name::Class,Text::Whitespace,Punctuation,Name::Variable,Punctuation,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable,Text::Whitespace,Punctuation,Text::Whitespace,Text,Text::Whitespace,Text
					pop!(1)
				end
				rule %r/([^\s(❙❚:=]+)(\s*)(?:(\()([^)]*)(\)))?(\s*)(?:(:)(\s*)([^❘❙❚=]+))?(\s*)/im do
					groups Name::Class,Text::Whitespace,Punctuation,Name::Variable,Punctuation,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable,Text::Whitespace
					push :moduleDefiniens
				end
			end
			state :theoryHeader do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/([^\s❙❚:=]+)(\s*)(?:(:)(\s*)([^\s❙❚=]+))?(\s*)(?:(>)([^❙❚=]+))?/im do
					groups Name::Class,Text::Whitespace,Punctuation,Text::Whitespace,Text,Text::Whitespace,Punctuation,Name::Variable
					push :moduleDefiniens
				end
			end
			state :moduleDefiniens do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/❘/im do
					token Text
				end
				rule %r/#+/im do
					token Punctuation
					push :notationExpression
				end
				rule %r/=/im do
					token Punctuation
					push :moduleBody
				end
				rule %r/❚/im do
					token Text
					pop!(2)
				end
			end
			state :viewHeader do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/(\S+)(\s*)(:)(\s*)(\S+)(\s*)(->|→)(\s*)([^❚=]+)/im do
					groups Name::Class,Text::Whitespace,Punctuation,Text::Whitespace,Text,Text::Whitespace,Punctuation,Text::Whitespace,Text
					push :moduleDefiniens
				end
			end
			state :diagramHeader do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/(\S+)(\s*)(:)(\s*)([^❚=]+)/im do
					groups Name::Variable,Text::Whitespace,Punctuation,Text::Whitespace,Name::Variable
					push :expression
				end
				rule %r/[^❚=]+/im do
					token Name::Variable
					push :expression
				end
				rule %r/❚/im do
					token Text
					pop!(1)
				end
			end
			state :moduleBody do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/\/T .*?(❙|❚)/im do
					token Comment::Multiline
				end
				rule %r/\/\/.*?(❙|❚)/im do
					token Comment::Multiline
				end
				rule %r/(@_description)(\s+)([^❙])+(❙)/im do
					groups Keyword,Text::Whitespace,Literal::String,Text
				end
				rule %r/(meta)(\s+)(\S+)(\s+)([^❙❚]+)(\s*)(❙)/im do
					groups Keyword::Declaration,Text::Whitespace,Text,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(include)(\s+)([^❙]+)(❙)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text
				end
				rule %r/(constant)(\s+)([^\s:❘❙]+)/im do
					groups Keyword::Declaration,Text::Whitespace,Name::Variable::Class
					push :constantDeclaration
				end
				rule %r/(rule)(\s+)([^❙]+)(\s*)(❙)/im do
					groups Keyword::Namespace,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(realize)(\s+)([^❙]+)(\s*)(❙)/im do
					groups Keyword,Text::Whitespace,Text,Text::Whitespace,Text
				end
				rule %r/(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(structure\b)/im do
					groups Keyword,Text::Whitespace,Keyword,Text::Whitespace,Keyword::Declaration
					push :structuralFeatureHeader
				end
				rule %r/theory\b/im do
					token Keyword::Declaration
					push :theoryHeader
				end
				rule %r/(?:(total|implicit)(\s+))?(?:(total|implicit)(\s+))?(view\b)/im do
					groups Keyword,Text::Whitespace,Keyword,Text::Whitespace,Keyword::Declaration
					push :viewHeader
				end
				rule %r/(#+)([^❙]+)(❙)/im do
					groups Literal::String::Doc,Literal::String::Doc,Text
				end
				rule %r/([^\s:=#❘❙❚]+)(\s+)(?=[^\s:=@#❘❙❚]+)/im do
					groups Keyword::Declaration,Text::Whitespace
					push :structuralFeatureHeader
				end
				rule %r/[^\s:=#❘❙❚]+/im do
					token Name::Variable::Class
					push :constantDeclaration
				end
				rule %r/[^❚]*?❙/im do
					token Generic::Error
				end
				rule %r/❚/im do
					token Text
					pop!(3)
				end
			end
			state :constantDeclaration do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/:/im do
					token Punctuation
					push :expression
				end
				rule %r/=/im do
					token Punctuation
					push :expression
				end
				rule %r/#+/im do
					token Punctuation
					push :notationExpression
				end
				rule %r/(@_description)(\s+)([^❘❙])+/im do
					groups Keyword,Text::Whitespace,Literal::String
				end
				rule %r/(@)([^❘❙]+)/im do
					groups Punctuation,Name::Constant
				end
				rule %r/role\b/im do
					token Keyword
					push :expression
				end
				rule %r/(meta)(\s+)(\S+)(\s+)([^❘❙]+)(\s*)(?=❘|❙)/im do
					groups Keyword::Declaration,Text::Whitespace,Text,Text::Whitespace,Text,Text::Whitespace
				end
				rule %r/\/\/[^❘❙]*/im do
					token Comment::Multiline
				end
				rule %r/❘/im do
					token Text
				end
				rule %r/❙/im do
					token Text
					pop!(1)
				end
				rule %r/[^❙❚]*?=[^❚]*?❚/im do
					token Generic::Error
					pop!(1)
				end
				rule %r/[^❚]*?❙/im do
					token Generic::Error
					pop!(1)
				end
			end
			state :notationExpression do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/\d+/im do
					token Literal::String::Interpol
				end
				rule %r/%?((I|V|L)\d+[Td]*)(_(I|L)\d+[Td]*)*/im do
					token Literal::String::Interpol
				end
				rule %r/…/im do
					token Literal::String::Interpol
				end
				rule %r/(\bprec)(\s+)(-?\d+)/im do
					groups Keyword,Text::Whitespace,Literal::Number::Integer
					pop!(1)
				end
				rule %r/([^\s\d…❘❙❚]+)/im do
					token Literal::String::Symbol
				end
				rule %r/(?=[❘❙❚])/im do
					token Text::Whitespace
					pop!(1)
				end
			end
			state :expression do
				rule %r/\s+/im do
					token Text::Whitespace
				end
				rule %r/[^❘❙❚]*/im do
					token Text
					pop!(1)
				end
			end
		end
	end
end
